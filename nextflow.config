// Nextflow configuration file

// Pipeline metadata
manifest {
    name = 'genome-to-llm-kg'
    author = 'Your Team'
    description = 'Genome-to-LLM Knowledge Graph Pipeline'
    version = '0.1.0'
    nextflowVersion = '>=22.04.0'
}

// Default parameters
params {
    // Input/Output
    input_dir = "data/raw"
    outdir = "results"
    
    // Processing options
    min_contig_length = 500
    genetic_code = 11
    threads = 4
    max_workers = null  // Auto-detect
    
    // Pipeline control
    copy_files = false
    skip_taxonomy = false
    enable_cc = false
    force = false
    
    // Container settings
    container_registry = "docker.io"
    container_cache = "./containers"
    
    // Resource limits
    max_memory = "16.GB"
    max_cpus = 16
    max_time = "240.h"
}

// Process configuration
process {
    // Default container
    container = "${params.container_registry}/genomelabs/genome-kg:latest"
    
    // Resource allocation by process
    withName: PREPARE_INPUTS {
        cpus = 1
        memory = "4.GB"
        time = "1.h"
    }
    
    withName: QUAST_QC {
        cpus = { Math.min(params.threads, task.attempt * 2) }
        memory = { 8.GB * task.attempt }
        time = "2.h"
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: DFAST_QC {
        cpus = { Math.min(8, task.attempt * 4) }
        memory = { 16.GB * task.attempt }
        time = "4.h"
        errorStrategy = 'retry'
        maxRetries = 1
        // Custom container with DFAST_QC databases
        container = "${params.container_registry}/genomelabs/dfast-qc:latest"
    }
    
    withName: PRODIGAL {
        cpus = 2
        memory = "8.GB"
        time = "1.h"
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName: ASTRA_SCAN {
        cpus = { Math.min(16, task.attempt * 8) }
        memory = { 32.GB * task.attempt }
        time = "8.h"
        errorStrategy = 'retry'
        maxRetries = 1
        // GPU support for future protein structure prediction
        // accelerator = 1  // Uncomment when GPU needed
    }
    
    withName: BUILD_KNOWLEDGE_GRAPH {
        cpus = 4
        memory = "16.GB"
        time = "2.h"
        container = "${params.container_registry}/genomelabs/kg-builder:latest"
    }
    
    withName: CREATE_LLM_INDICES {
        cpus = 8
        memory = "32.GB"
        time = "4.h"
        // Future GPU support for embedding generation
        // accelerator = 1
        container = "${params.container_registry}/genomelabs/llm-indices:latest"
    }
}

// Executor configuration
executor {
    name = 'local'
    cpus = params.max_cpus
    memory = params.max_memory
}

// Profile configurations for different environments
profiles {
    
    // Local development
    standard {
        executor.name = 'local'
        process.container = null  // Use conda environment
        docker.enabled = false
        singularity.enabled = false
    }
    
    // Docker execution
    docker {
        docker.enabled = true
        docker.userEmulation = true
        docker.temp = 'auto'
        singularity.enabled = false
        process.container = "${params.container_registry}/genomelabs/genome-kg:latest"
    }
    
    // Singularity execution  
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = params.container_cache
        docker.enabled = false
        process.container = "${params.container_registry}/genomelabs/genome-kg:latest"
    }
    
    // HPC cluster (SLURM)
    cluster {
        executor.name = 'slurm'
        executor.queueSize = 50
        singularity.enabled = true
        
        process {
            queue = 'normal'
            clusterOptions = '--account=your_account'
            
            withName: ASTRA_SCAN {
                queue = 'gpu'
                clusterOptions = '--account=your_account --gres=gpu:1'
            }
            
            withName: CREATE_LLM_INDICES {
                queue = 'gpu' 
                clusterOptions = '--account=your_account --gres=gpu:1'
            }
        }
    }
    
    // Cloud execution (AWS Batch)
    cloud {
        executor.name = 'awsbatch'
        executor.awscli = '/home/ec2-user/miniconda/bin/aws'
        
        process {
            queue = 'genome-kg-queue'
            container = "${params.container_registry}/genomelabs/genome-kg:latest"
            
            withName: ASTRA_SCAN {
                queue = 'genome-kg-gpu-queue'
                accelerator = 1
            }
            
            withName: CREATE_LLM_INDICES {
                queue = 'genome-kg-gpu-queue'
                accelerator = 1
            }
        }
        
        aws {
            region = 'us-west-2'
            batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
        }
    }
}

// Reporting and monitoring
timeline {
    enabled = true
    file = "${params.outdir}/timeline.html"
}

report {
    enabled = true
    file = "${params.outdir}/report.html"
}

trace {
    enabled = true
    file = "${params.outdir}/trace.txt"
}

dag {
    enabled = true
    file = "${params.outdir}/dag.svg"
}

// Work directory cleanup
cleanup = true